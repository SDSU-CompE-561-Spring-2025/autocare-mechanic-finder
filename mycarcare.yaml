openapi: 3.0.3
info:
  title: My Car Care
  description: |-
    -Website Description-
  version: 0.0.1
tags:
  - name: user
    description: User operations

  - name: car
    description: Access user cars
  
  - name: maps
    description: Google Maps API

paths:
  /user/register:
    post:
      tags: 
        - user
      summary: Adds a new user
      operationId: userRegister
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        200:
          description: Successfully created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        422:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /user/login:
    post:
      tags:
        - user
      summary: Logs in the user
      operationId: userLogin
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/login'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
        401:
          description: Login failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /user/verify/{verification_code}:
    post:
      tags:
        - user
      summary: Verifies the user's email
      operationId: userVerify
      parameters:
        - name: verification_code
          in: path
          required: true
          description: Verification Code
          schema:
            type: string
      responses:
        200:
          description: Verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
        401:
          description: Verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /user/update:
    put:
      tags:
        - user
      summary: Updates user information
      operationId: userUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        200:
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        404:
          description: User not found
        422:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
  /user/info/{username}:
    get:
      tags:
        - user
      summary: Returns user's information
      operationId: userInfo
      parameters:
        - name: username
          in: path
          required: true
          description: Username
          schema:
            type: string
      responses:
        200: 
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        404:
          description: User not found
  /user/delete/{username}:
    delete:
      tags:
        - user
      summary: Deletes a user
      operationId: userDelete
      parameters:
        - name: username
          in: path
          required: true
          description: Username
          schema:
            type: string
      responses:
        200: 
          description: User deleted
        401:
          description: Not authorized
        404:
          description: User not found
  /car/add:
    post:
      tags:
        - car
      summary: Adds a new car into a user's garage
      operationId: carAdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/car'
      responses:
        200:
          description: Successfully added car
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/car'
        422:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /car/update:
    put:
      tags:
        - car
      summary: Updates a car's information
      operationId: carUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/car'
      responses:
        200:
          description: Successfully updated car
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/car'
        404:
          description: Car not found
        422:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /car/info/{car_id}:
    get:
      tags:
        - car
      summary: Returns car information
      operationId: carInfo
      parameters:
        - name: car_id
          in: path
          required: true
          description: Car ID
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Car information found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/car'
        404:
          description: Car not found
  /car/garage/{username}:
    get:
      tags:
        - car
      summary: Returns information all cars for the specified user
      operationId: carGarage
      parameters:
        - name: username
          in: path
          required: true
          description: Username
          schema:
            type: string
      responses:
        200:
          description: Array with details of all of a user's cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/car'
        404:
          description: User not found
  /car/delete/{car_id}:
    delete:
      tags:
        - car
      summary: Deletes a car from the user's garage
      operationId: carDelete
      parameters:
        - name: car_id
          in: path
          required: true
          description: Car ID
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Car deleted
        401:
          description: Not authorized
        404:
          description: Car not found
  /maps/api/textsearch:
    get:
      tags:
        - maps
      summary: Finds nearby auto shops
      operationId: findAutoshops
      parameters:
        - name: location
          in: query
          description: Location
          schema:
            type: string
        - name: search_Radius
          in: query
          description: Search Radius
          schema: 
            type: integer
      responses:
        200:
          description: Success
        400:
          description: Invalid Argument

components:
  schemas:
    user:
      type: object
      properties:
        username:
          type: string
          example: 'testuser'
        email:
          type: string
          example: 'testuser@email.com'
        state:
          type: string
          example: 'california'
        password:
          type: string
          example: 'secret1234'
    login:
      type: object
    error:
      type: object
    token:
      type: object
    car:
      type: object  